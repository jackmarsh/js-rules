def node_module(name:str, scope:str = '', module:str = '', version:str = '', visibility:list=[], deps:list=[], hashes:list=None, binary:bool=False, entry_point:str=''):
    module_name = module or name
    if scope:
        url = f'https://registry.yarnpkg.com/{scope}/{module_name}/-/{module_name}-{version}.tgz'
        module_label = f'{scope}/{module_name}'
    else:
        url = f'https://registry.yarnpkg.com/{module_name}/-/{module_name}-{version}.tgz'
        module_label = f'{module_name}'


    download = remote_file(
        name=f'_{name}#download',
        url=url,
        out=name,
        hashes=hashes,
        extract=True,
    )
    entry_point = f'{name}/package/{entry_point}' if entry_point else ''
    out_location = package_name() + f"/{name}.js"
    return build_rule(
        name = name,
        outs = [name + ".js"],
        srcs = [download],
        exported_deps = deps,
        tools = [CONFIG.JS.ESBUILD],
        visibility = visibility,
        labels = [
            f'node_module:{module_label}:{out_location}',
            f'module_version:{module_label}@{version}',
        ],
        pre_build = _compile_comand(entry_point=entry_point, binary=binary),
    )

def js_library(name:str, module_name:str='', srcs:list=[], deps:list=[], visibility:list=[], entry_point:str="index.js"):
    module_name = module_name or package_name() + f"/{name}"
    out_location = package_name() + f"/{name}.js"

    return build_rule(
        name = name,
        outs = [name + ".js"],
        srcs = srcs,
        exported_deps = deps,
        tools = [CONFIG.JS.ESBUILD],
        visibility = visibility,
        labels = [
            f'node_module:{module_name}:{out_location}',
        ],
        pre_build = _compile_comand(entry_point),
    )

def js_binary(name:str, entry_point:str="index.js", srcs:list=[], deps:list=[], visibility:list=[]):
    return build_rule(
        name = name,
        outs = [name + ".js"],
        srcs = srcs,
        exported_deps = deps,
        binary = True,
        tools = [CONFIG.JS.ESBUILD],
        visibility = visibility,
        pre_build = _link_command(entry_point),
    )

def css_file(name:str, srcs:list=[], deps:list=[], visibility:list=[]):
    """Build rule for CSS files.

    Args:
        name (str): Name of the rule.
        src (str): CSS filename.
        deps (list): CSS dependencies (e.g., imported stylesheets).
        visibility (list): Module visibility.
    """

    return filegroup(
        name = name,
        srcs = srcs,
        exported_deps = deps,
        visibility = visibility,
    )


def _compile_comand(entry_point:str=None, binary:bool=False):
    def pre_build(name):
        entry_point_flag = f"--entry_point=$PKG_DIR/{entry_point}" if entry_point else "--package_json=$(find $PKG_DIR -name 'package.json' | head -n 1)"
        binary_flag = "--binary" if binary else ""
        external_flags = _external_flags(name)
        cmd = f"$TOOLS compile {entry_point_flag} {external_flags} {binary_flag} --out=$OUT"
        set_command(name, cmd)
    return pre_build

def _link_command(entry_point:str):
    def pre_build(name):
        # TODO(jackmarsh): probably want to add the shebang conditionally but this is useful for now
        module_flags = _module_map_flags(name)
        cmd = f"$TOOLS link --entry_point $PKG_DIR/{entry_point} {module_flags} --out=$OUT.tmp && echo \"#!/usr/bin/env node\" > $OUT && cat $OUT.tmp >> $OUT"
        set_command(name, cmd)
    return pre_build

def _external_flags(name):
    modules = [module.split(":")[0] for module in get_labels(name, 'node_module:')]
    return " ".join([f"--external={module}" for module in modules])

def _module_map_flags(name):
    modules = [module.split(":") for module in get_labels(name, 'node_module:')]
    return " ".join([f"--module {module}:{path}" for module, path in modules])


def http_server(name:str, entry_point:str, static_files:list=[]):
    build_rule(
        name=name,
        srcs={
            'ep': entry_point,
            'sf': static_files,
        },
        cmd=' && '.join([
            'mkdir -p www',
            'cp $SRCS www',
            "$TOOL",
        ]),
        tools = [CONFIG.JS.HTTP_SERVER],
        deps = [entry_point],
    )
