package main

import (
	"context"
	"fmt"
	"os"

	"github.com/thought-machine/go-flags"

	"tools/node_modules/resolver"
)

var opts = struct {
	ModuleName    string `short:"m" long:"module_name" description:"Name of the module to resolve" required:"true"`
	ModuleVersion string `short:"v" long:"module_version" description:"Version of the module to resolve" required:"true"`
	RegistryURL   string `short:"r" long:"registry_url" description:"NPM registry URL" default:"https://registry.yarnpkg.com"`
	OutputFile    string `short:"o" long:"output" description:"Output file for build rules" default:"generated_rules.please"`
	Timeout       int    `short:"t" long:"timeout" description:"Timeout in seconds for individual dependency resolution" default:"60"`
}{}

func main() {
	p := flags.NewParser(&opts, flags.Default)
	_, err := p.Parse()
	if err != nil {
		os.Exit(1)
	}

	r := resolver.NewResolver(opts.RegistryURL).WithTimeout(opts.Timeout)
	err = r.ResolveDependency(context.Background(), opts.ModuleName, opts.ModuleVersion)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error resolving dependencies: %v\n", err)
		os.Exit(1)
	}
	err = r.GenerateBUILD(opts.OutputFile)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error generating build rules: %v\n", err)
		os.Exit(1)
	}
	fmt.Printf("Build rules successfully generated in %s\n", opts.OutputFile)
}
